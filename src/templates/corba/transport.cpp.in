/* Generated from rtt_typekit_generator/src/templates/corba/transport.cpp.in */
/******************************************************************************
 *  Copyright (c) 2016, Intermodalics BVBA                                    *
 *  All rights reserved.                                                      *
 ******************************************************************************/

#include <@_typekit_NAME@/typekit/includes.h>
#include <@_typekit_NAME@/typekit/types.h>

#include <rtt/transports/corba/CorbaLib.hpp>
#include <rtt/transports/corba/CorbaTemplateProtocol.hpp>
#include <rtt/types/TransportPlugin.hpp>
#include <rtt/types/TypekitPlugin.hpp>

#include <boost/preprocessor.hpp>

class @_typekit_CNAME@CorbaTransportPlugin
    : public RTT::types::TransportPlugin
{
public:
    virtual bool registerTransport(std::string type_name, RTT::types::TypeInfo* ti) {
        if(ti->hasProtocol(ORO_CORBA_PROTOCOL_ID))
            return false;

        #define ADD_PROTOCOL(z, i, _2) \
            if (TYPE_NAME(i) == type_name) { \
                return ti->addProtocol(ORO_CORBA_PROTOCOL_ID, \
                    new RTT::corba::CorbaTemplateProtocol< TYPE(i) >()); \
            }
        BOOST_PP_REPEAT(TYPE_CNT, ADD_PROTOCOL, BOOST_PP_EMPTY);

        return false;

    }

    virtual std::string getTransportName() const {
        return "CORBA";
    }

    virtual std::string getTypekitName() const {
        return "@_typekit_NAME@";
    }

    virtual std::string getName() const {
        return "@_typekit_NAME@/CORBA";
    }
};

ORO_TYPEKIT_PLUGIN(@_typekit_CNAME@CorbaTransportPlugin)
